step48:
-------
	Create a UpdateEmployee component inside "components" folder.

UpdateEmployee.js 
-----------------
function UpdateEmployee() 
{
  return (
    <div className="pt-5">
            Update Employee Component 
    </div>
  )
}

export default UpdateEmployee



step49:
------
	Add UpdateEmployee component to routing file i.e App.js.

App.js 
------
import './App.css';
import CreateEmployee from './components/CreateEmployee';
import EmployeeList from './components/EmployeeList';
import Footer from './components/Footer';
import Header from './components/Header';
import {BrowserRouter,Routes,Route} from 'react-router-dom';
import UpdateEmployee from './components/UpdateEmployee';
function App()
{

    return (
        <div className="bg-color">
            <Header/>
            
            <BrowserRouter>
            <div className='container'>
                <Routes>
                    <Route exact path='/' element={<EmployeeList/>}></Route>
                    <Route path='/employees' element={<EmployeeList/>}></Route>
                    <Route path='/add-emp' element={<CreateEmployee/>}></Route>
                    <Route path='/update-emp/:id' element={<UpdateEmployee/>}></Route>
                </Routes>
            </div>
            </BrowserRouter>

            <Footer/>
        </div>
    )
}
export default App;

	
step50:
-------
	Add update button to EmployeeList component.

EmployeeList.js 
---------------
import {useEffect, useState} from 'react';
import {useTypewriter,Cursor} from 'react-simple-typewriter';
import { Link } from 'react-router-dom';
import EmployeeService from '../services/EmployeeService';
function EmployeeList()
{
    const [employees,setEmployees]= useState([]);


    const [value] = useTypewriter({
        words: ["Details","List","Info"],
        loop:true,
        typeSpeed:120,
        deleteSpeed:80
    })

    useEffect(()=>{
        EmployeeService.getAllEmployees().then(res=>{
            setEmployees(res.data);
        })
    },[])


    return(
        <div className='container pt-5'>
                <h4 className='text-center pt-5'> Employee {value} <Cursor/></h4>

                <div className='row pt-5'>
                <Link to="/add-emp" className='btn btn-warning mb-2' style={{width:"250px"}}> Add Employee </Link>    
                <table className='table table-bordered table-striped'>
                    <thead>
                        <tr>
                            <th>ID</th>
                            <th>Name</th>
                            <th>DOJ</th>
                            <th>Department</th>
                            <th>Designation</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        {
                            employees.map(employee=>{
                                return <tr key={employee.id}>
                                            <td>{employee.id}</td>
                                            <td>{employee.name}</td>
                                            <td>{employee.doj}</td>
                                            <td>{employee.dept.deptName}</td>
                                            <td>{employee.dept.designation}</td>
                                            <td>
    <Link to={`update-emp/${employee.id}`} className='btn btn-secondary'> update </Link>                                            
                                            </td>
                                        </tr>
                            })
                        }
                    </tbody>

                </table>
                </div>
        </div>
    )
}
export default EmployeeList;

step51:
-------
	Create a GET Mapping logic inside EmployeeService.java file.

EmployeeService.java
--------------------
package com.ihub.www.service;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.ihub.www.exception.ResourceNotFoundException;
import com.ihub.www.model.Employee;
import com.ihub.www.repo.EmployeeRepository;

@Service
public class EmployeeService 
{
	@Autowired 
	EmployeeRepository employeeRepository;
	
	public Employee addEmployee(Employee employee)
	{
		return employeeRepository.save(employee);
	}
	
	public List<Employee> getAllEmployees()
	{
		return employeeRepository.findAll();
	}
	
	public Employee getEmployeeById(long id)
	{
		return employeeRepository.findById(id).orElseThrow(()-> new ResourceNotFoundException("Id Not Found"));
	}
}


step52:
-------
	Add get mapping logic inside EmployeeController.java file.

EmployeeController.java
-----------------------
package com.ihub.www.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.ihub.www.model.Employee;
import com.ihub.www.service.EmployeeService;

@CrossOrigin(origins = "http://localhost:3000")
@RestController
@RequestMapping("/api/v1")
public class EmployeeController
{
	@Autowired
	EmployeeService employeeService;
	
	@PostMapping("/employees")
	public Employee addEmployee(@RequestBody Employee employee)
	{
		return employeeService.addEmployee(employee);
	}
	
	@GetMapping("/employees")
	public List<Employee> getAllEmployees()
	{
		return employeeService.getAllEmployees();
	}
	
	@GetMapping("/employees/{id}")
	public Employee getEmployeeById(@PathVariable long id)
	{
		return employeeService.getEmployeeById(id);
	}
}

step53:
------
	Write PUT mapping logic inside EmployeeService.java file.

EmployeeService.java
-------------------
package com.ihub.www.service;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;

import com.ihub.www.exception.ResourceNotFoundException;
import com.ihub.www.model.Employee;
import com.ihub.www.repo.EmployeeRepository;

@Service
public class EmployeeService 
{
	@Autowired 
	EmployeeRepository employeeRepository;
	
	public Employee addEmployee(Employee employee)
	{
		return employeeRepository.save(employee);
	}
	
	public List<Employee> getAllEmployees()
	{
		return employeeRepository.findAll();
	}
	
	public Employee getEmployeeById(long id)
	{
		return employeeRepository.findById(id).orElseThrow(()-> new ResourceNotFoundException("Id Not Found"));
	}
	
	public ResponseEntity<Employee> updateEmployee(long id,Employee employee)
	{
		if(employeeRepository.existsById(id))
		{
			Employee existingEmp = employeeRepository.findById(id).orElseThrow(()->new ResourceNotFoundException("Id Not Found"));
			existingEmp.setName(employee.getName());
			existingEmp.setDoj(employee.getDoj());
			existingEmp.setDept(employee.getDept());
			employeeRepository.save(existingEmp);
			return new ResponseEntity<>(existingEmp,HttpStatus.OK);
			
		}
		else
		{
			return new ResponseEntity<>(HttpStatus.NOT_FOUND);
		}
	}
}

step54:
-------
	Add PUT mapping logic inside EmployeeController.java file.

EmployeeController.java
------------------------
package com.ihub.www.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.ihub.www.model.Employee;
import com.ihub.www.service.EmployeeService;

@CrossOrigin(origins = "http://localhost:3000")
@RestController
@RequestMapping("/api/v1")
public class EmployeeController
{
	@Autowired
	EmployeeService employeeService;
	
	@PostMapping("/employees")
	public Employee addEmployee(@RequestBody Employee employee)
	{
		return employeeService.addEmployee(employee);
	}
	
	@GetMapping("/employees")
	public List<Employee> getAllEmployees()
	{
		return employeeService.getAllEmployees();
	}
	
	@GetMapping("/employees/{id}")
	public Employee getEmployeeById(@PathVariable long id)
	{
		return employeeService.getEmployeeById(id);
	}
	
	@PutMapping("/employees/{id}")
	public ResponseEntity<Employee> updateEmployee(@PathVariable long id,@RequestBody Employee employee)
	{
		return employeeService.updateEmployee(id, employee);
	}
}

step55:
-------
	Add GET and PUT mapping inside EmployeeService.js file.

EmployeeService.js 
------------------
import axios from 'axios';
const EMPLOYEE_API = "http://localhost:9191/api/v1/employees";

class EmployeeService
{
       addEmployee(employee)
       {
            return axios.post(EMPLOYEE_API,employee);
       } 
       getAllEmployees()
       {
            return axios.get(EMPLOYEE_API);
       }
       getEmployeeById(employeeId)
       {
          return axios.get(EMPLOYEE_API+'/'+employeeId);
       }
       updateEmployee(employeeId,employee)
       {
          return axios.put(EMPLOYEE_API+'/'+employeeId,employee);
       }


}
export default new EmployeeService();


step56:
-------
	Create a UpdateEmployee component.

UpdateEmployee.js
-----------------

import {useNavigate,useParams} from 'react-router-dom';
import { useEffect, useState } from 'react';
import EmployeeService from '../services/EmployeeService.js';

function UpdateEmployee() 
{
  let navigate = useNavigate();
  const {id} = useParams();

  const [name,setName] = useState("");
  const [doj,setDoj] = useState("");
  const [department,setDepartment]= useState({deptName:"",designation:""});

  const handleCancel = (e)=>{
    e.preventDefault();
    navigate("/");
  }

  useEffect(()=>{
    EmployeeService.getEmployeeById(id).then(res=>{
        setName(res.data.name);
        setDoj(res.data.doj);
        setDepartment({
          deptName: res.data.dept.deptName,
          designation: res.data.dept.designation
        })
    })
  },[])

  const handleUpdate=(e)=>{
    e.preventDefault();
    const updateEmployee={
      name,
      doj,
      dept:{
          deptName: department.deptName,
          designation: department.designation
      }
    }

    EmployeeService.updateEmployee(id,updateEmployee).then(res=>{
        navigate("/");
    })
  }


  return (
    <div className="pt-5">
           <div className="container pt-5">
              <div className="card offset-3 w-50 p-3">
                  <h5 className="text-center">Update Employee</h5>
                  <form> 
                  <label className="my-2">Name:</label>
                  <input type="text" name="name" id="name" className="form-control"
                  value={name}
                  onChange={(e)=> setName(e.target.value)}/>

                  <label className="my-2">DOJ:</label>
                  <input type="text" name="doj" id="doj" className="form-control"
                  value={doj}
                  onChange={(e)=> setDoj(e.target.value)}/>

                  <label className="my-2">Department:</label>
                  <input type="text" name="deptName" id="deptName" className="form-control"
                  value={department.deptName}
                  onChange={(e)=> setDepartment({...department,deptName:e.target.value})}/>

                  <label className="my-2">Designation:</label>
                  <input type="text" name="designation" id="designation" className="form-control"
                  value={department.designation}
                  onChange={(e)=> setDepartment({...department,designation:e.target.value})}/>

                  <button className="btn btn-danger w-25 mt-3 float-start" onClick={handleCancel}> cancel </button>
                  <button className="btn btn-success w-25 mt-3 float-end" onClick={handleUpdate}> submit </button>
                  </form> 
              </div>
           </div>
    </div>
  )
}

export default UpdateEmployee

















































































































